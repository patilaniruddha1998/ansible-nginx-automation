# Ensure the NGINX upgrade directory exists. This directory will store all files related to the upgrade process.
- name: Ensure NGINX upgrade directory exists
  ansible.builtin.file:
    path: "{{ nginx_upgrade_dir }}"
    state: directory
    mode: '0755'  # Set appropriate permissions for the directory
  comment: "Creates the NGINX upgrade directory if it doesn't exist."
  register: create_upgrade_dir
  debug:
    msg: "Create upgrade directory: {{ create_upgrade_dir }}"
  tags:
    - nginx_plus_upgrade
    - setup

# Change the working directory to the NGINX upgrade directory to perform subsequent operations.
# This ensures all commands are executed in the correct context.
- name: Change to NGINX upgrade directory
  ansible.builtin.command:
    chdir: "{{ nginx_upgrade_dir }}"
    cmd: pwd  # Optional: Verify the current directory
  register: chdir_result
  comment: "Changes the working directory to the NGINX upgrade directory."
  debug:
    msg: "Change directory: {{ chdir_result }}"
  tags:
    - nginx_plus_upgrade
    - setup

# Download the NGINX upgrade package (zip file) from the Artifactory repository.
# This step fetches the required package for the upgrade process.
- name: Download NGINX package from Artifactory
  ansible.builtin.get_url:
    url: "{{ artifactory_url }}"  # URL of the package in Artifactory
    dest: "{{ nginx_upgrade_dir }}/{{ nginx_file_name }}.zip"  # Destination path for the downloaded file
    validate_certs: no  # Disable certificate validation for Artifactory
    url_username: "{{ artifactory_username }}"  # Artifactory username
    url_password: "{{ artifactory_password }}"  # Artifactory password
    mode: '0644'  # Set appropriate permissions for the downloaded file
  comment: "Downloads the NGINX zip file from Artifactory."
  register: download_package
  debug:
    msg: "Download package: {{ download_package }}"
  tags:
    - nginx_plus_upgrade
    - download

# Backup the current NGINX configuration to a backup directory with a timestamp.
# This ensures the existing configuration is preserved in case of issues during the upgrade.
- name: Backup current NGINX configuration
  ansible.builtin.command:
    cmd: "cp -r {{ nginx_config_dir }} {{ nginx_backup_dir }}/{{ nginx_backup_prefix }}_{{ ansible_date_time.date }}"
  ignore_errors: true  # Ignore errors if the backup directory already exists
  comment: "Creates a backup of the current NGINX configuration."
  register: backup_config
  debug:
    msg: "Backup configuration: {{ backup_config }}"
  notify:
    - Stop-Nginx  # Notify the handler to stop NGINX before proceeding
  tags:
    - nginx_plus_upgrade
    - backup

# Remove any existing NGINX packages (both base and additional modules) to prepare for the upgrade.
# This ensures a clean slate for the new installation.
- name: Remove old NGINX packages
  ansible.builtin.package:
    name:
      - nginx  # Base NGINX package
      - "{{ query('rpm', '^nginx-', 'a') }}"  # Query for all nginx-* packages
    state: absent  # Ensure the packages are removed
  ignore_errors: true  # Ignore errors if the packages are not installed
  comment: "Removes all existing NGINX packages."
  register: remove_old_packages
  debug:
    msg: "Remove old packages: {{ remove_old_packages }}"
  tags:
    - nginx_plus_upgrade
    - cleanup

# Ensure the directory for extracting the NGINX upgrade package exists.
# This directory will hold the extracted files for the upgrade.
- name: Ensure extraction directory exists
  ansible.builtin.file:
    path: "{{ nginx_extracted_dir }}"
    state: directory
    mode: '0755'  # Set appropriate permissions for the directory
  comment: "Ensures the extraction directory for NGINX exists."
  register: create_extract_dir
  debug:
    msg: "Create extract directory: {{ create_extract_dir }}"
  tags:
    - nginx_plus_upgrade
    - setup

# Extract the downloaded NGINX upgrade package into the specified directory.
# This step prepares the files for installation.
- name: Extract NGINX package
  ansible.builtin.unarchive:
    src: "{{ nginx_upgrade_dir }}/{{ nginx_file_name }}.zip"  # Path to the downloaded zip file
    dest: "{{ nginx_extracted_dir }}"  # Destination directory for extraction
    remote_src: yes  # Indicates the file is already on the remote host
    creates: "{{ nginx_extracted_dir }}/# A file expected after extraction"  # Prevents re-extraction if the file exists
  comment: "Extracts the downloaded NGINX zip file."
  register: unarchive_package
  debug:
    msg: "Extract package: {{ unarchive_package }}"
  tags:
    - nginx_plus_upgrade
    - extract

# Install the new NGINX packages using the `yum localinstall` command.
# This step installs the upgraded NGINX version.
- name: Install new NGINX packages
  ansible.builtin.command:
    cmd: "yum localinstall -y {{ nginx_rpm_glob }}"  # Install all RPMs matching the glob pattern
    chdir: "{{ nginx_extracted_dir }}"  # Change to the directory containing the RPMs
  become: true  # Run the command as a privileged user
  when: (nginx_rpm_glob | glob | length > 0)  # Only run if RPM files are found
  register: yum_localinstall_output
  failed_when: yum_localinstall_output.rc != 0  # Mark the task as failed if the command returns a non-zero exit code
  comment: "Installs the new NGINX packages using yum localinstall."
  debug:
    msg: "Install new packages: {{ yum_localinstall_output }}"
  tags:
    - nginx_plus_upgrade
    - install

# Retrieve the version and release information of the base NGINX Plus package.
# This step is useful for dynamically determining the expected RPMs for the upgrade process.
- name: Get Base NGINX Plus Package Version
  ansible.builtin.command:
    cmd: "rpm -q --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}' {{ nginx_plus_base_package }}"  # Query the version, release, and architecture of the package
  register: base_nginx_version_info  # Store the output of the command in a variable
  changed_when: false  # Mark the task as not changing the system, as it only retrieves information
  ignore_errors: true  # Ignore errors if the package is not installed
  comment: "Gets the version and release of the base NGINX Plus package for dynamic RPM verification."
  debug:
    msg: "Base NGINX Plus version info: {{ base_nginx_version_info }}"  # Print the retrieved version information for debugging
  tags:
    - nginx_plus_upgrade
    - install
  
# Dynamically create the list of expected NGINX Plus RPMs based on the installed base version.
# This ensures that the correct RPMs are verified during the upgrade process.
- name: Set Expected NGINX Plus RPM List (Dynamic)
  ansible.builtin.set_fact:
    nginx_expected_rpms_dynamic: "{{ [nginx_plus_base_package + '-' + (base_nginx_version_info.stdout | default('')) + '.x86_64'] +
                                    nginx_plus_module_names | map('regex_replace', '^', nginx_plus_module_prefix) |
                                    map('regex_replace', '$', '-' + (base_nginx_version_info.stdout | default('')) + '.amzn2.ngx.x86_64') | list }}"
  when: base_nginx_version_info.rc == 0  # Only proceed if the base version information was successfully retrieved
  comment: "Dynamically creates the list of expected NGINX Plus RPMs based on the installed base version."
  debug:
    msg: "Dynamically expected NGINX Plus RPMs: {{ nginx_expected_rpms_dynamic }}"
  tags:
    - nginx_plus_upgrade
    - install

# Verify that the dynamically generated list of expected NGINX Plus RPM packages is installed.
# This ensures that all required RPMs are present after the upgrade.
- name: Verify Installed NGINX RPM Packages (Dynamic)
  ansible.builtin.command:
    cmd: "rpm -qa | grep '^nginx-plus-' | grep -E '{{ nginx_expected_rpms_dynamic | join('|') }}'"
  register: installed_nginx_rpms_dynamic
  changed_when: false  # This task does not modify the system
  when: nginx_expected_rpms_dynamic is defined  # Only run if the expected RPM list is defined
  comment: "Verifies that the dynamically generated list of expected NGINX Plus RPM packages are installed."
  debug:
    msg: "Installed NGINX Plus RPM packages (Dynamic): {{ installed_nginx_rpms_dynamic.stdout_lines }}"
  tags:
    - nginx_plus_upgrade
    - install

# Check if all expected NGINX Plus modules are installed.
# This ensures that no required modules are missing after the upgrade.
- name: Check if all expected NGINX Plus modules are installed
  ansible.builtin.set_fact:
    all_modules_installed: "{{ nginx_expected_rpms_dynamic | difference(installed_nginx_rpms_dynamic.stdout_lines) | length == 0 }}"
  when: installed_nginx_rpms_dynamic is defined  # Only run if the installed RPM list is defined
  comment: "Checks if all expected NGINX Plus modules are installed."
  debug:
    msg: "All modules installed: {{ all_modules_installed }}"
  tags:
    - nginx_plus_upgrade
    - install

# Remove the default NGINX configuration directory to prepare for restoring the custom configuration.
# This ensures that the upgraded NGINX uses the correct configuration files.
- name: Remove default nginx configuration directory
  ansible.builtin.file:
    path: "{{ nginx_config_dir }}"
    state: absent  # Remove the directory
  when: all_modules_installed  # Only proceed if all required modules are installed
  comment: "Removes the default NGINX configuration directory."
  register: remove_default_config
  debug:
    msg: "Remove default config: {{ remove_default_config }}"
  tags:
    - nginx_plus_upgrade
    - install

# Restore the NGINX configuration from the backup created earlier.
# This ensures that the upgraded NGINX uses the previous configuration.
- name: Restore NGINX configuration from backup
  ansible.builtin.command:
    cmd: "cp -r {{ nginx_backup_dir }}/{{ nginx_backup_prefix }}_{{ ansible_date_time.date }} {{ nginx_config_dir }}"
  ignore_errors: true  # Ignore errors if the backup directory does not exist
  when: all_modules_installed  # Only proceed if all required modules are installed
  comment: "Restores the NGINX configuration from the backup."
  register: restore_config
  debug:
    msg: "Restore config: {{ restore_config }}"
  tags:
    - nginx_plus_upgrade
    - install

# Validate the NGINX configuration to ensure it is correct after the upgrade.
# This step prevents starting NGINX with an invalid configuration.
- name: Validate NGINX configuration
  ansible.builtin.command:
    cmd: "nginx -t"  # Test the NGINX configuration
  register: nginx_config_test
  failed_when: nginx_config_test.rc != 0  # Mark the task as failed if the configuration test fails
  comment: "Validates the NGINX configuration."
  debug:
    msg: "Validate config: {{ nginx_config_test }}"
  notify:
    - Start-Nginx  # Notify the handler to start NGINX if the configuration is valid
  tags:
    - nginx_plus_upgrade
    - validate

# Retrieve and print the installed NGINX version for verification.
# This step confirms that the upgrade was successful.
- name: Retrieve NGINX version
  ansible.builtin.command:
    cmd: "nginx -v"  # Get the NGINX version
  register: nginx_version_output
  changed_when: false  # This task does not modify the system
  failed_when: nginx_version_output.rc != 0  # Mark the task as failed if the command fails
  comment: "Retrieves the installed NGINX version."
  debug:
    msg: "NGINX version is {{ nginx_version_output.stderr }}"
  tags:
    - nginx_plus_upgrade
    - version

# Confirm if NGINX is enabled to start at boot.
# This ensures that NGINX will automatically start after a system reboot.
- name: Check if NGINX is enabled to start at boot
  ansible.builtin.command:
    cmd: "systemctl is-enabled {{ nginx_service_name }}"  # Check the service status
  register: is_enabled
  changed_when: false  # This task does not modify the system
  comment: "Checks if the NGINX service is enabled to start at boot."
  debug:
    msg: "NGINX boot status: {{ is_enabled.stdout }}"
  tags:
    - nginx_plus_upgrade
    - check_boot_status

# Enable the NGINX service to start at boot if it is currently disabled.
# This ensures that NGINX is always available after a system reboot.
- name: Enable NGINX service if disabled
  ansible.builtin.command:
    cmd: "systemctl enable {{ nginx_service_name }}"  # Enable the service
  when:
    - is_enabled.stdout == "disabled"  # Only run if the service is disabled
  register: enable_result
  changed_when: enable_result.rc == 0  # Mark the task as changed only if the command succeeds
  comment: "Enables the NGINX service to start at boot if it was disabled."
  tags:
    - nginx_plus_upgrade
    - enable_service

# Print a debug message after enabling the NGINX service.
# This provides confirmation that the service was successfully enabled.
- name: Debug message after enabling NGINX
  ansible.builtin.debug:
    msg: "NGINX has been enabled to start at boot."
  when:
    - is_enabled.stdout == "disabled"  # Only run if the service was disabled
  tags:
    - nginx_plus_upgrade
    - enable_service