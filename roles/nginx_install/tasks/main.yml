# Ensure the NGINX upgrade directory exists. This directory will be used to store upgrade-related files.
- name: Ensure NGINX upgrade directory exists
  ansible.builtin.file:
    path: "{{ nginx_upgrade_dir }}"
    state: directory
    mode: '0755'
  register: create_upgrade_dir
  tags:
    - nginx_install
    - setup

- name: Debug - Ensure NGINX upgrade directory exists
  debug:
    var: create_upgrade_dir

# Change the working directory to the NGINX upgrade directory to perform subsequent operations.
- name: Change to NGINX upgrade directory
  ansible.builtin.command:
    chdir: "{{ nginx_upgrade_dir }}"
    cmd: pwd # Optional: Verify current directory
  register: chdir_result
  tags:
    - nginx_install
    - setup

- name: Debug - Change to NGINX upgrade directory
  debug:
    var: chdir_result

# Download the NGINX upgrade package (zip file) from the Artifactory repository.
# - name: Download NGINX package from Artifactory
#   ansible.builtin.get_url:
#     url: "{{ artifactory_url }}"
#     dest: "{{ nginx_upgrade_dir }}/{{ nginx_file_name }}.zip"
#     validate_certs: no
#     url_username: "{{ artifactory_username }}"
#     url_password: "{{ artifactory_password }}"
#     mode: '0644'
#   #comment: "Downloads the NGINX zip file from Artifactory."
#   register: download_package
#   debug:
#     msg: "Download package: {{ download_package }}"
#   tags:
#     - nginx_install
#     - download

# Ensure the directory for extracting the NGINX upgrade package exists.
- name: Ensure extraction directory exists
  ansible.builtin.file:
    path: "{{ nginx_extracted_dir }}"
    state: directory
    mode: '0755'
  register: create_extract_dir
  tags:
    - nginx_install
    - setup

- name: Debug - Ensure extraction directory exists
  debug:
    var: create_extract_dir

# Extract the downloaded NGINX upgrade package into the specified directory.
- name: Extract NGINX package
  ansible.builtin.unarchive:
    src: "{{ nginx_upgrade_dir }}/{{ nginx_file_name }}.zip"
    dest: "{{ nginx_extracted_dir }}"
    remote_src: yes  # Indicates the file is on the remote machine
  register: unarchive_package
  tags:
    - nginx_install
    - extract

- name: Debug - Extract NGINX package
  debug:
    var: unarchive_package
- name: Debug variables for extraction
  debug:
    msg:
      - "nginx_upgrade_dir: {{ nginx_upgrade_dir }}"
      - "nginx_file_name: {{ nginx_file_name }}"
      - "nginx_extracted_dir: {{ nginx_extracted_dir }}"

- name: List files in extracted directory
  ansible.builtin.command:
    cmd: "ls -l {{ nginx_extracted_dir }}"
  register: list_files
  debug:
    var: list_files.stdout_lines

- name: Set executable permissions for all files in the extracted directory
  ansible.builtin.file:
    path: "{{ item }}"
    mode: '0755'
  with_fileglob:
    - "{{ nginx_extracted_dir }}/*"  # Match all files in the extracted directory.
  register: set_permissions
  tags:
    - nginx_install
    - permissions

# Ensure all RPM files in the extracted directory have executable permissions.
# - name: Set executable permissions for RPM files
#   ansible.builtin.file:
#     path: "{{ item }}"
#     mode: '0755'  # Set read, write, and execute permissions for the owner, and read and execute for others.
#   with_fileglob:
#     - "{{ nginx_extracted_dir }}/*"  # Match all RPM files in the extracted directory.
#   register: set_permissions
#   tags:
#     - nginx_install
#     - permissions

# - name: Debug - List all files in the extracted directory
#   debug:
#     msg: "Processing file: {{ item }}"
#   with_fileglob:
#     - "{{ nginx_extracted_dir }}/*"

# - name: Debug - Set executable permissions for RPM files
#   debug:
#     var: "Set permissions result: {{ set_permissions }}"

# Install the new NGINX packages using the `yum localinstall` command.
- name: Install new NGINX packages
  ansible.builtin.command:
    cmd: "yum localinstall -y {{ item }}"
  with_fileglob:
    - "{{ nginx_extracted_dir }}/*.rpm"
  become: true
  register: yum_localinstall_output
  failed_when: yum_localinstall_output.rc != 0
  tags:
    - nginx_install
    - install

- name: Debug - Install new NGINX packages
  debug:
    var: yum_localinstall_output

# Retrieve the version and release information of the base NGINX Plus package.
- name: Get Base NGINX Plus Package Version
  ansible.builtin.command:
    cmd: "rpm -q --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}' {{ nginx_plus_base_package }}"
  register: base_nginx_version_info
  changed_when: false
  ignore_errors: true
  tags:
    - nginx_install
    - install

- name: Debug - Get Base NGINX Plus Package Version
  debug:
    var: base_nginx_version_info

# Dynamically create the list of expected NGINX Plus RPMs based on the installed base version.
- name: Set Expected NGINX Plus RPM List (Dynamic)
  ansible.builtin.set_fact:
    nginx_expected_rpms_dynamic: "{{ [nginx_plus_base_package + '-' + (base_nginx_version_info.stdout | default('')) + '.x86_64'] +
                                    nginx_plus_module_names | map('regex_replace', '^', nginx_plus_module_prefix) |
                                    map('regex_replace', '$', '-' + (base_nginx_version_info.stdout | default('')) + '.amzn2.ngx.x86_64') | list }}"
  when: base_nginx_version_info.rc == 0
  tags:
    - nginx_install
    - install

- name: Debug - Set Expected NGINX Plus RPM List (Dynamic)
  debug:
    var: nginx_expected_rpms_dynamic

# Verify that the dynamically generated list of expected NGINX Plus RPM packages is installed.
- name: Verify Installed NGINX RPM Packages (Dynamic)
  ansible.builtin.command:
    cmd: "rpm -qa | grep '^nginx-plus-' | grep -E '{{ nginx_expected_rpms_dynamic | join('|') }}'"
  register: installed_nginx_rpms_dynamic
  changed_when: false
  when: nginx_expected_rpms_dynamic is defined
  tags:
    - nginx_install
    - install

- name: Debug - Verify Installed NGINX RPM Packages (Dynamic)
  debug:
    var: installed_nginx_rpms_dynamic

# Check if all expected NGINX Plus modules are installed.
- name: Check if all expected NGINX Plus modules are installed
  ansible.builtin.set_fact:
    all_modules_installed: "{{ nginx_expected_rpms_dynamic | difference(installed_nginx_rpms_dynamic.stdout_lines) | length == 0 }}"
  when: installed_nginx_rpms_dynamic is defined
  tags:
    - nginx_install
    - install

- name: Debug - Check if all expected NGINX Plus modules are installed
  debug:
    var: all_modules_installed

# Validate the NGINX configuration to ensure it is correct after the upgrade.
- name: Validate NGINX configuration
  ansible.builtin.command:
    cmd: "nginx -t"
  register: nginx_config_test
  failed_when: nginx_config_test.rc != 0
  notify:
    - Start-Nginx
  tags:
    - nginx_install
    - validate

- name: Debug - Validate NGINX configuration
  debug:
    var: nginx_config_test

# Retrieve and print the installed NGINX version for verification.
- name: Retrieve NGINX version
  ansible.builtin.command:
    cmd: "nginx -v"
  register: nginx_version_output
  changed_when: false
  failed_when: nginx_version_output.rc != 0
  tags:
    - nginx_install
    - version

- name: Debug - Retrieve NGINX version
  debug:
    var: nginx_version_output

# Confirm if NGINX is enabled to start at boot.
- name: Check if NGINX is enabled to start at boot
  ansible.builtin.command:
    cmd: "systemctl is-enabled {{ nginx_service_name }}"
  register: is_enabled
  changed_when: false
  tags:
    - nginx_install
    - check_boot_status

- name: Debug - Check if NGINX is enabled to start at boot
  debug:
    var: is_enabled

# Enable the NGINX service if it is disabled.
- name: Enable NGINX service if disabled
  ansible.builtin.command:
    cmd: "systemctl enable {{ nginx_service_name }}"
  when:
    - is_enabled.stdout == "disabled"
  register: enable_result
  changed_when: enable_result.rc == 0
  tags:
    - nginx_install
    - enable_service

- name: Debug - Enable NGINX service if disabled
  debug:
    var: enable_result