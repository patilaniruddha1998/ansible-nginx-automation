# Ensure the NGINX upgrade directory exists. This directory will be used to store upgrade-related files.
- name: Ensure NGINX upgrade directory exists
  ansible.builtin.file:
    path: "{{ nginx_upgrade_dir }}"
    state: directory
    mode: '0755'
  register: create_upgrade_dir
  tags:
    - nginx_install
    - setup

- name: Debug - Ensure NGINX upgrade directory exists
  debug:
    var: create_upgrade_dir

# Change the working directory to the NGINX upgrade directory to perform subsequent operations.
- name: Change to NGINX upgrade directory
  ansible.builtin.command:
    chdir: "{{ nginx_upgrade_dir }}"
    cmd: pwd # Optional: Verify current directory
  register: chdir_result
  tags:
    - nginx_install
    - setup

- name: Debug - Change to NGINX upgrade directory
  debug:
    var: chdir_result

# # Download the NGINX upgrade package (zip file) from the Artifactory repository.
# # This step fetches the required package for the upgrade process.
# - name: Download NGINX package from Artifactory
#   ansible.builtin.get_url:
#     url: "{{ artifactory_url }}"  # URL of the package in Artifactory
#     dest: "{{ nginx_upgrade_dir }}/{{ nginx_file_name }}.zip"  # Destination path for the downloaded file
#     validate_certs: no  # Disable certificate validation for Artifactory
#     url_username: "{{ artifactory_username }}"  # Artifactory username
#     url_password: "{{ artifactory_password }}"  # Artifactory password
#     mode: '0644'  # Set appropriate permissions for the downloaded file
#   comment: "Downloads the NGINX zip file from Artifactory."
#   register: download_package
#   debug:
#     msg: "Download package: {{ download_package }}"
#   tags:
#     - nginx_upgrade
#     - download

# Ensure the directory for extracting the NGINX upgrade package exists.
- name: Ensure extraction directory exists
  ansible.builtin.file:
    path: "{{ nginx_extracted_dir }}"
    state: directory
    mode: '0755'
  register: create_extract_dir
  tags:
    - nginx_install
    - setup

- name: Debug - Ensure extraction directory exists
  debug:
    var: create_extract_dir

# Extract the downloaded NGINX upgrade package into the specified directory.
- name: Extract NGINX package
  ansible.builtin.unarchive:
    src: "{{ nginx_upgrade_dir }}/{{ nginx_file_name }}.zip"
    dest: "{{ nginx_extracted_dir }}"
    remote_src: yes  # Indicates the file is on the remote machine
  register: unarchive_package
  tags:
    - nginx_install
    - extract

- name: Debug - Extract NGINX package
  debug:
    var: unarchive_package

- name: Find all files in the extracted directory
  ansible.builtin.find:
    paths: "{{ nginx_extracted_dir }}"
    file_type: file
  register: found_files
  tags:
    - nginx_install

- name: Debug - Find all files in the extracted directory
  debug:
    var: found_files

- name: Set executable permissions for all files in the extracted directory
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: '0755'
  loop: "{{ found_files.files }}"
  tags:
    - nginx_install
    - permissions

- name: Debug - Set executable permissions for all files in the extracted directory
  debug:
    msg: "Processed file: {{ item.path }}"
  loop: "{{ found_files.files }}"

- name: Debug - List all found files
  debug:
    var: found_files.files

- name: Debug - Filtered files for installation
  debug:
    msg: >
      Selected files (priority): {{
        found_files.files | selectattr('path', 'search', '/root/nginx-upgrade/nginx-1.26.0-1/nginx-1.26.0-1.amzn2023.ngx.x86_64') | list
      }}
      Remaining files: {{
        found_files.files | rejectattr('path', 'search', '/root/nginx-upgrade/nginx-1.26.0-1/nginx-1.26.0-1.amzn2023.ngx.x86_64') | list
      }}

- name: Install new NGINX packages
  ansible.builtin.command:
    cmd: "yum localinstall -y {{ item.path }}"
  loop: >
    {{
      found_files.files | selectattr('path', 'search', nginx_priority_package) |
      list +
      (found_files.files | rejectattr('path', 'search', nginx_priority_package) | list)
    }}
  register: yum_localinstall_output
  failed_when: yum_localinstall_output.rc != 0
  vars:
    nginx_priority_package: "{{ nginx_extracted_dir }}/{{ nginx_file_name }}.amzn2023.ngx.x86_64"  # Define the prioritized package path
  tags:
    - nginx_install
    - install

- name: Debug - Installation order
  debug:
    msg: >
      Installation order: {{
        found_files.files | selectattr('path', 'search', nginx_priority_package) | list +
        (found_files.files | rejectattr('path', 'search', nginx_priority_package) | list)
      }}

# # Install the new NGINX packages using the `yum localinstall` command.
# - name: Install new NGINX packages
#   ansible.builtin.command:
#     cmd: "yum localinstall -y {{ item.path }}"
#   loop: "{{ found_files.files }}"
#   register: yum_localinstall_output
#   failed_when: yum_localinstall_output.rc != 0
#   tags:
#     - nginx_install
#     - install

# - name: Debug - Install new NGINX packages
#   debug:
#     var: yum_localinstall_output


# Retrieve the version and release information of the base NGINX package.
- name: Get Base NGINX Package Version
  ansible.builtin.command:
    cmd: "rpm -q --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}' {{ nginx_base_package }}"
  register: base_nginx_version_info
  changed_when: false
  ignore_errors: true
  tags:
    - nginx_install
    - install

- name: Debug - Get Base NGINX Package Version
  debug:
    var: base_nginx_version_info

# Dynamically create the list of expected NGINX RPMs based on the installed base version.
- name: Set Expected NGINX RPM List (Dynamic)
  ansible.builtin.set_fact:
    nginx_expected_rpms_dynamic: "{{ [nginx_base_package + '-' + (base_nginx_version_info.stdout | default(''))] +
                                    nginx_module_names | map('regex_replace', '^', nginx_module_prefix) |
                                    map('regex_replace', '$', '-' + (base_nginx_version_info.stdout | default(''))) | list }}"
  when: base_nginx_version_info.rc == 0
  tags:
    - nginx_install
    - install

- name: Debug - Set Expected NGINX RPM List (Dynamic)
  debug:
    var: nginx_expected_rpms_dynamic

# Verify that the dynamically generated list of expected NGINX RPM packages is installed.
- name: Verify Installed NGINX RPM Packages (Dynamic)
  ansible.builtin.shell:
    cmd: "rpm -qa | grep '^nginx-'"
  register: installed_nginx_rpms_dynamic
  changed_when: false
  when: nginx_expected_rpms_dynamic is defined
  tags:
    - nginx_install
    - install

- name: Debug - Installed NGINX RPMs
  debug:
    var: installed_nginx_rpms_dynamic.stdout_lines

# Check if all expected NGINX  modules are installed.
- name: Check if all expected NGINX  modules are installed
  ansible.builtin.set_fact:
    all_modules_installed: "{{ nginx_expected_rpms_dynamic | difference(installed_nginx_rpms_dynamic.stdout_lines) | length == 0 }}"
  when: installed_nginx_rpms_dynamic is defined
  tags:
    - nginx_install
    - install

- name: Debug - Difference between expected and installed NGINX RPMs
  debug:
    msg: >
      Difference: {{
        nginx_expected_rpms_dynamic | difference(installed_nginx_rpms_dynamic.stdout_lines)
      }}

# Validate the NGINX configuration to ensure it is correct after the upgrade.
- name: Validate NGINX configuration
  ansible.builtin.command:
    cmd: "nginx -t"
  register: nginx_config_test
  failed_when: nginx_config_test.rc != 0
  when: all_modules_installed | default(false)  # Only run if all_modules_installed is true
  notify:
    - Start NGINX Service
  tags:
    - nginx_install
    - validate

- name: Debug - Validate NGINX configuration
  debug:
    var: nginx_config_test

# Retrieve and print the installed NGINX version for verification.
- name: Retrieve NGINX version
  ansible.builtin.command:
    cmd: "nginx -v"
  register: nginx_version_output
  changed_when: false
  failed_when: nginx_version_output.rc != 0
  when: all_modules_installed | default(false)  # Only run if all_modules_installed is true
  tags:
    - nginx_install
    - version

- name: Debug - Retrieve NGINX version
  debug:
    var: nginx_version_output

# Confirm if NGINX is enabled to start at boot.
- name: Check if NGINX is enabled to start at boot
  ansible.builtin.command:
    cmd: "systemctl is-enabled {{ nginx_service_name }}"
  register: is_enabled
  changed_when: false
  when: all_modules_installed | default(false)  # Only run if all_modules_installed is true
  failed_when: is_enabled.rc not in [0, 1]  # Allow both rc=0 (enabled) and rc=1 (disabled)
  tags:
    - nginx_install
    - check_boot_status

- name: Debug - Check if NGINX is enabled to start at boot
  debug:
    var: is_enabled

# Enable the NGINX service if it is disabled.
- name: Enable NGINX service if disabled
  ansible.builtin.command:
    cmd: "systemctl enable {{ nginx_service_name }}"
  when:
    - all_modules_installed | default(false)  # Only run if all_modules_installed is true
    - is_enabled.rc == 1  # Only run if the service is disabled
  register: enable_result
  changed_when: enable_result.rc == 0
  tags:
    - nginx_install
    - enable_service

- name: Debug - Enable NGINX service if disabled
  debug:
    var: enable_result